[doc Test of macros and variable scope]

[global fail_pattern=[Ee][Rr][Rr][Oo][Rr]]
[global eprompt=\d+>\s]

# Setup a shell dedicated for calculations
[shell calc]
    # Setup a (local) failure pattern
    -$fail_pattern|SH-PROMPT:
    !erl
    """?
    Eshell.*
    $eprompt
    """

# Call some macros and use global and my scoped variables
[shell main]
    -$fail_pattern
    [invoke calc "2+1"]
    [invoke verify 3]

# Change variable in local scope
[shell other]
    -$fail_pattern
    [local result=2]
    [invoke verify 2]

# Access variable from other shell
[shell main]
    [invoke verify 3]
    [invoke calc "$result*4"]
    [invoke verify 12]

[shell other]
    [invoke verify 12]

    # Test an error case
[shell calc]
     # Reset the failure pattern
     -
[shell other]
    # Exit the shell and verify that it really exits
    !exit
    [endshell]

### Macros ###

# Calculate an expression and return the result in the global variable result
[macro calc expr]
    # Use a temporary variable that only is alive in one macro invocation
    [my myshell=$LUX_SHELLNAME]
    [shell calc]
        !
        !$expr.

        # Use multi-line expr to sync output
        """?
        $eprompt.*\.
        (.*)
        $eprompt
        """
        # Retrieve the value from the sub-expression
        [global result=$1]
    [shell $myshell]
    # [progress $expr=$result]
[endmacro]

# Verify that the calculated (global) result fulfills the expectations
[macro verify expected]
    !echo "xxx${result}yyy"
    ?^xxx${expected}yyy
    ?SH-PROMPT:
[endmacro]
